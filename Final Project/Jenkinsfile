
pipeline {
    agent { label 'slave1' }
    environment {
        DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    }
    stages {
        stage("Git checkout") {
            steps {
                deleteDir()
                git branch: 'master',
                    url: 'https://github.com/didarbek/PhoneBook'
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'PhoneBook']],
                          userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/didarbek/PhoneBook']]
                          ])
                echo "Git Checkout Completed!"
            }
        }
        stage("Testing our application") {
            steps {
                dir("tests") {
                    script {
                        sh "python -m pytest tests.py"
                        echo "Tests has been successfully passed"
                    }
                }
            }
        }
        stage('SonarQube') {
             steps {
                 dir('tests') {
                    script {
                        sh """
                            sonar-scanner.bat -D"sonar.projectKey=sonarqube-flask" -D"sonar.sources=." -D"sonar.host.url=http://localhost:9000" -D"sonar.login=f2d32ebef8b3767dd9v4b14f4b24418cf284927g"
                           """
                        echo 'Sonarqube finished successfully'
                        }
                    }
                 }
        }
        stage("Login to DockerHub") {
			steps {
				sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                echo "Login to DockerHub Completed"
			}
		}
        stage("Building our WEB docker image") {
            steps {
                sh "ls -lh"
                sh "docker-compose -f docker-compose.prod.yml --project-name 127.0.0.1:5000/abbphonebook:${BUILD_NUMBER} build"
                echo "Image Build is Completed"
            }
        }
        stage("Push to docker registry") {
            steps {
                sh "docker push 127.0.0.1:5000/abbphonebook:${BUILD_NUMBER}"
                echo "Push to Docker Registry Completed"
            }
        }
        stage("Update k8s deployment") {
            steps {
                dir("k8s") {
                    script {
                        sh """sed -i -e "/^\\s*image:\\s.*/s/abbphonebook:.*/abbphonebook:${BUILD_NUMBER}/g" front/deployment.yaml"""
                        sh "kubectl apply -f front/deployment.yaml"
                        echo "k8s has been updated"
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
            sh(label: "Cleanup", script: """#!/bin/bash
                docker logout
            """)
        }
    }
}
